{
  "metadata": {
    "version": "1.0.0",
    "last_updated": "2025-01-06",
    "description": "Structured agent capabilities for AI-optimized selection and coordination",
    "total_agents": 9,
    "coordination_system": "AgentCoordinator with confidence-based routing"
  },
  "agents": {
    "DocumentationAgent": {
      "confidence_level": 0.8,
      "specializations": [
        "changelog_generation",
        "readme_updates",
        "markdown_consistency",
        "version_documentation",
        "link_validation"
      ],
      "input_patterns": [
        "documentation inconsistency",
        "changelog.*update",
        "readme.*outdated",
        "markdown.*format",
        "version.*bump.*document"
      ],
      "output_formats": [
        "markdown_files",
        "structured_changelog",
        "version_updates"
      ],
      "typical_fixes": [
        {
          "issue": "Version mismatch in README",
          "action": "Update version references across all .md files",
          "confidence": 0.9
        },
        {
          "issue": "Broken documentation links",
          "action": "Validate and fix internal/external links",
          "confidence": 0.8
        },
        {
          "issue": "Inconsistent formatting",
          "action": "Standardize markdown structure and syntax",
          "confidence": 0.8
        }
      ],
      "file_types": [".md", ".rst", ".txt"],
      "estimated_fix_time": "2-5 minutes",
      "success_rate": 0.85
    },
    "RefactoringAgent": {
      "confidence_level": 0.9,
      "specializations": [
        "complexity_reduction",
        "dead_code_removal",
        "ast_analysis",
        "method_extraction",
        "import_optimization"
      ],
      "input_patterns": [
        "cognitive complexity.*exceeds.*15",
        "F401.*imported but unused",
        "dead code detected",
        "complex.*method.*refactor",
        "duplicate.*logic"
      ],
      "complexity_rules": {
        "max_complexity": 15,
        "extraction_threshold": 20,
        "nesting_penalty": true,
        "boolean_chain_penalty": true
      },
      "typical_fixes": [
        {
          "issue": "Complexity 34 -> 3 (91% reduction)",
          "action": "Extract helper methods, reduce nesting",
          "confidence": 0.95,
          "example_transformation": {
            "before_lines": 45,
            "after_lines": 12,
            "methods_extracted": 3
          }
        },
        {
          "issue": "Unused imports cleanup",
          "action": "AST analysis and safe removal",
          "confidence": 0.85
        },
        {
          "issue": "Duplicate code blocks",
          "action": "Extract common utilities",
          "confidence": 0.8
        }
      ],
      "file_types": [".py"],
      "tools_used": ["ast", "complexity_calculator", "usage_analyzer"],
      "estimated_fix_time": "3-8 minutes",
      "success_rate": 0.92
    },
    "PerformanceAgent": {
      "confidence_level": 0.85,
      "specializations": [
        "o_n_squared_detection",
        "string_optimization",
        "memory_efficiency",
        "loop_optimization",
        "data_structure_choice"
      ],
      "input_patterns": [
        "performance.*bottleneck",
        "O\\(n²\\).*detected",
        "string.*concatenation.*loop",
        "memory.*usage.*high",
        "slow.*iteration"
      ],
      "performance_rules": {
        "detect_nested_loops": true,
        "analyze_string_building": true,
        "check_data_structures": true,
        "memory_profiling": false
      },
      "typical_fixes": [
        {
          "issue": "O(n²) nested loop optimization",
          "action": "Convert to dictionary lookup or set operations",
          "confidence": 0.9,
          "performance_gain": "90-95% time reduction"
        },
        {
          "issue": "String concatenation in loop",
          "action": "Use list comprehension with join()",
          "confidence": 0.85,
          "performance_gain": "60-80% time reduction"
        },
        {
          "issue": "Inefficient data structure choice",
          "action": "Replace list with set/dict for lookups",
          "confidence": 0.8,
          "performance_gain": "O(n) to O(1) lookup"
        }
      ],
      "transforms_code": true,
      "file_types": [".py"],
      "estimated_fix_time": "4-10 minutes",
      "success_rate": 0.88
    },
    "DRYAgent": {
      "confidence_level": 0.8,
      "specializations": [
        "code_duplication_detection",
        "pattern_extraction",
        "utility_creation",
        "common_logic_identification"
      ],
      "input_patterns": [
        "code.*duplication.*detected",
        "repeated.*logic",
        "similar.*functions",
        "common.*pattern.*extract"
      ],
      "duplication_rules": {
        "min_line_similarity": 5,
        "similarity_threshold": 0.8,
        "extract_threshold": 3
      },
      "typical_fixes": [
        {
          "issue": "Duplicate error handling patterns",
          "action": "Extract common error handler utility",
          "confidence": 0.85
        },
        {
          "issue": "Repeated validation logic",
          "action": "Create reusable validator functions",
          "confidence": 0.8
        }
      ],
      "file_types": [".py"],
      "estimated_fix_time": "5-12 minutes",
      "success_rate": 0.82
    },
    "FormattingAgent": {
      "confidence_level": 0.8,
      "specializations": [
        "code_style_violations",
        "import_formatting",
        "consistency_enforcement",
        "pep8_compliance"
      ],
      "input_patterns": [
        "E[0-9]+.*style.*violation",
        "import.*formatting",
        "line.*length.*exceeded",
        "whitespace.*issue"
      ],
      "formatting_rules": {
        "line_length": 88,
        "import_sorting": true,
        "trailing_whitespace": false,
        "blank_lines": "pep8_standard"
      },
      "typical_fixes": [
        {
          "issue": "Import order violations",
          "action": "Sort imports according to isort standards",
          "confidence": 0.9
        },
        {
          "issue": "Line length exceeded",
          "action": "Break long lines preserving readability",
          "confidence": 0.8
        }
      ],
      "file_types": [".py"],
      "tools_used": ["ruff", "isort"],
      "estimated_fix_time": "1-3 minutes",
      "success_rate": 0.95
    },
    "SecurityAgent": {
      "confidence_level": 0.8,
      "specializations": [
        "vulnerability_detection",
        "hardcoded_path_fixes",
        "subprocess_security",
        "best_practices_enforcement"
      ],
      "input_patterns": [
        "B[0-9]+.*security.*issue",
        "hardcoded.*path",
        "shell=True.*dangerous",
        "security.*vulnerability"
      ],
      "security_rules": {
        "no_hardcoded_paths": true,
        "no_shell_true": true,
        "tempfile_required": true,
        "input_validation": true
      },
      "typical_fixes": [
        {
          "issue": "B108: hardcoded_tmp_directory",
          "action": "Replace with tempfile.NamedTemporaryFile()",
          "confidence": 0.9,
          "security_improvement": "Eliminates path traversal risks"
        },
        {
          "issue": "B602: subprocess_popen_with_shell_equals_true",
          "action": "Use list arguments without shell=True",
          "confidence": 0.85,
          "security_improvement": "Prevents command injection"
        }
      ],
      "file_types": [".py"],
      "tools_used": ["bandit", "regex_patterns"],
      "estimated_fix_time": "3-7 minutes",
      "success_rate": 0.87
    },
    "ImportOptimizationAgent": {
      "confidence_level": 0.8,
      "specializations": [
        "unused_import_removal",
        "import_organization",
        "dependency_cleanup",
        "circular_import_detection"
      ],
      "input_patterns": [
        "F401.*imported.*unused",
        "import.*not.*used",
        "circular.*import",
        "import.*optimization"
      ],
      "import_rules": {
        "remove_unused": true,
        "sort_imports": true,
        "group_by_type": true,
        "detect_circular": true
      },
      "typical_fixes": [
        {
          "issue": "Unused imports detected",
          "action": "Safe AST-based removal of unused imports",
          "confidence": 0.9
        },
        {
          "issue": "Import organization needed",
          "action": "Group and sort imports by standard/third-party/local",
          "confidence": 0.85
        }
      ],
      "file_types": [".py"],
      "estimated_fix_time": "2-5 minutes",
      "success_rate": 0.9
    },
    "TestCreationAgent": {
      "confidence_level": 0.8,
      "specializations": [
        "test_failure_fixes",
        "fixture_management",
        "assertion_improvements",
        "test_dependency_resolution"
      ],
      "input_patterns": [
        "test.*failed",
        "assertion.*error",
        "fixture.*not.*found",
        "test.*timeout"
      ],
      "testing_rules": {
        "timeout_limit": 300,
        "fixture_scope": "function",
        "async_test_caution": true,
        "synchronous_preferred": true
      },
      "typical_fixes": [
        {
          "issue": "Test assertion failures",
          "action": "Fix assertion logic and expected values",
          "confidence": 0.85
        },
        {
          "issue": "Missing test fixtures",
          "action": "Create or import required fixtures",
          "confidence": 0.8
        },
        {
          "issue": "Async test hangs",
          "action": "Convert to synchronous test when possible",
          "confidence": 0.75,
          "note": "Async tests avoided due to hanging issues"
        }
      ],
      "file_types": [".py", "test_*.py", "*_test.py"],
      "frameworks": ["pytest", "unittest"],
      "estimated_fix_time": "4-8 minutes",
      "success_rate": 0.83
    },
    "TestSpecialistAgent": {
      "confidence_level": 0.8,
      "specializations": [
        "advanced_testing_patterns",
        "test_framework_integration",
        "coverage_optimization",
        "test_architecture"
      ],
      "input_patterns": [
        "advanced.*test.*needed",
        "test.*framework.*integration",
        "coverage.*improvement",
        "test.*architecture"
      ],
      "testing_expertise": {
        "frameworks": ["pytest", "hypothesis", "unittest", "pytest-asyncio"],
        "patterns": ["parameterization", "fixtures", "mocking"],
        "coverage_tools": ["coverage.py", "pytest-cov"]
      },
      "typical_fixes": [
        {
          "issue": "Complex test scenarios needed",
          "action": "Design comprehensive test architecture",
          "confidence": 0.8
        },
        {
          "issue": "Test framework integration",
          "action": "Configure and optimize testing tools",
          "confidence": 0.8
        }
      ],
      "file_types": [".py", "conftest.py", "test_*.py"],
      "estimated_fix_time": "6-15 minutes",
      "success_rate": 0.85
    }
  },
  "coordination_rules": {
    "single_agent_threshold": 0.7,
    "collaborative_threshold": 0.7,
    "max_agents_per_task": 3,
    "routing_logic": {
      "confidence >= 0.7": "use_single_best_agent",
      "confidence < 0.7": "use_collaborative_approach",
      "multiple_issue_types": "batch_processing_with_coordination"
    }
  },
  "workflow_patterns": {
    "ai_agent_iterations": {
      "max_iterations": 5,
      "typical_iterations": "2-3",
      "success_criteria": "all_hooks_pass_and_tests_pass",
      "failure_escalation": "ai_debug_mode"
    },
    "batch_processing": {
      "enabled": true,
      "collects_all_issues": true,
      "processes_together": true,
      "reduces_iterations": true
    },
    "learning_system": {
      "tracks_success_patterns": true,
      "adapts_confidence_levels": true,
      "improves_routing": true
    }
  },
  "integration_points": {
    "crackerjack_phases": [
      "fast_hooks",
      "test_execution",
      "comprehensive_hooks",
      "ai_batch_fixing"
    ],
    "mcp_tools": [
      "execute_crackerjack",
      "get_job_progress",
      "analyze_errors",
      "session_management"
    ],
    "external_tools": [
      "ruff",
      "pytest",
      "bandit",
      "pyright",
      "pre-commit"
    ]
  },
  "performance_metrics": {
    "avg_fix_success_rate": 0.87,
    "avg_fix_time": "4-8 minutes",
    "confidence_accuracy": 0.89,
    "collaboration_efficiency": 0.83,
    "learning_improvement_rate": "5% per month"
  }
}
