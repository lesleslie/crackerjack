[build-system]
requires = [
    "hatchling",
]
build-backend = "hatchling.build"

[project]
name = "crackerjack"
version = "0.31.10"
description = "Opinionated Python project management tool"
readme = "README.md"
authors = [
    { name = "Les Leslie", email = "les@lesleslie.com" },
]
requires-python = ">=3.13"
classifiers = [
    "Operating System :: POSIX",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = [
    "aiofiles>=24.1",
    "aiohttp>=3.12.14",
    "bandit>=1.8.6",
    "codespell>=2.4.1",
    "complexipy>=3.3",
    "creosote>=4.0.3",
    "fastapi>=0.116.1",
    "fastmcp>=2.10.6",
    "hatchling>=1.25",
    "jinja2>=3.1",
    "keyring>=25.6",
    "mcp>=1.12.2",
    "pre-commit>=4.2",
    "pydantic>=2.11.7",
    "pyleak>=0.1.14",
    "pyright>=1.1.403",
    "pytest>=8.4.1",
    "pytest-asyncio>=1",
    "pytest-benchmark>=5.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pytest-timeout>=2.4",
    "pytest-xdist>=3.8",
    "hypothesis>=6.100",
    "psutil>=6.1.0",
    "pyyaml>=6.0.2",
    "refurb>=2.1",
    "rich>=14.1",
    "ruff>=0.12.9",
    "structlog>=24.4",
    "textual>=0.89",
    "tomli-w>=1.2",
    "typer>=0.16",
    "uv>=0.7.20",
    "uvicorn>=0.32.1",
    "vulture>=2.14",
    "watchdog>=6",
    "websockets>=15.0.1",
    "tomli>=2.2.1",
]

[project.license]
text = "BSD-3-CLAUSE"

[project.scripts]
crackerjack = "crackerjack.__main__:cli"

[project.urls]
documentation = "https://github.com/lesleslie/crackerjack"
homepage = "https://github.com/lesleslie/crackerjack"
repository = "https://github.com/lesleslie/crackerjack"

[tool.hatch.build.targets.wheel]
include = [
    "crackerjack/**/*.py",
    "crackerjack/**/*.md",
]

[tool.ruff]
target-version = "py313"
line-length = 88
fix = true
unsafe-fixes = true
show-fixes = true
output-format = "full"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
extend-select = [
    "C901",
    "F",
    "I",
    "UP",
]
ignore = [
    "E402",
    "F821",
]
fixable = [
    "ALL",
]

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.codespell]
skip = "*/data/*"
quiet-level = 3
ignore-words-list = "crate,uptodate,nd,nin"

[tool.pytest.ini_options]
asyncio_mode = "auto"
timeout = 300
addopts = "--cov=crackerjack --cov-report=term-missing:skip-covered --cov-report=html:htmlcov --cov-report=json --strict-markers --strict-config -ra --tb=short"
testpaths = [
    "tests",
]
norecursedirs = [
    "~",
    ".git",
    "*.egg",
    "build",
    "dist",
    ".venv",
    "__pycache__",
    "node_modules",
]
markers = [
    "unit: marks test as a unit test",
    "benchmark: mark test as a benchmark",
    "integration: marks test as an integration test",
    "e2e: marks test as end-to-end test",
    "security: marks test as security test",
    "performance: marks test as performance test",
    "slow: marks test as slow running test",
    "smoke: marks test as smoke test",
    "regression: marks test as regression test",
    "api: marks test as API test",
    "database: marks test as database test",
    "external: marks test requiring external services",
    "no_leaks: detect asyncio task leaks",
    "property: marks test as property-based test",
    "mutation: marks test as mutation testing",
    "chaos: marks test as chaos engineering test",
    "ai_generated: marks test as AI-generated test",
    "breakthrough: marks test as breakthrough frontier test",
]

[tool.pytest.benchmark]
disable_gc = true
warmup = false
warmup_iterations = 0
min_rounds = 1
max_time = 5.0

[tool.coverage.run]
branch = false
source = [
    "crackerjack",
]
data_file = ".coverage"
parallel = false
omit = [
    "*/tests/*",
    "*/site-packages/*",
    "*/__pycache__/*",
    "*/__init__.py",
    "*/_version.py",
    "*/conftest.py",
    "*/test_*.py",
    "*/_test.py",
    "crackerjack/__main__.py",
]

[tool.coverage.report]
exclude_also = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "except ImportError",
    "def __str__",
    "@abstractmethod",
]
ignore_errors = false

[tool.pyright]
verboseOutput = true
include = [
    "crackerjack",
]
exclude = [
    "scratch",
    ".venv",
    "build",
    "dist",
    "tests/*",
    "examples/*",
    "crackerjack/mcp/*",
    "crackerjack/plugins/*",
]
extraPaths = [
    ".venv/lib/python3.13/site-packages/",
]
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportOptionalMemberAccess = false
reportOptionalCall = "warning"
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnknownArgumentType = false
reportInvalidTypeForm = "warning"
reportUnknownLambdaType = false
reportUnknownParameterType = false
reportPrivateUsage = false
reportUnnecessaryTypeIgnoreComment = "warning"
reportUnnecessaryComparison = "warning"
reportConstantRedefinition = "warning"
pythonVersion = "3.13"

[tool.uv]
keyring-provider = "subprocess"
publish-url = "https://upload.pypi.org/legacy/"
check-url = "https://pypi.org/simple/"

[tool.vulture]
min_confidence = 86
paths = [
    "crackerjack",
]
ignore_names = [
    "cls",
]

[tool.creosote]
paths = [
    "crackerjack",
]
deps-file = "pyproject.toml"
exclude-deps = [
    "hatchling",
    "pre-commit",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "pytest-xdist",
    "pytest-benchmark",
    "pyfiglet",
    "pyyaml",
    "uv",
    "tomli-w",
    "google-crc32c",
    "pytest-timeout",
    "keyring",
    "inflection",
    "pydantic-settings",
    "pyleak",
    "bandit",
    "vulture",
    "pyright",
    "creosote",
    "refurb",
    "complexipy",
    "codespell",
    "fastapi",
    "fastmcp",
    "uvicorn",
    "websockets",
    "watchdog",
    "ruff",
    "hypothesis",
    "psutil",
]

[tool.refurb]
enable_all = true
quiet = true
python_version = "3.13"

[tool.bandit]
target = [
    "crackerjack",
]
skips = [
    "B101",
    "B110",
    "B112",
    "B404",
    "B603",
    "B607",
]
exclude_dirs = [
    "tests/data",
]

[tool.complexipy]
default_pattern = "**/*.py"
exclude_patterns = [
    "**/tests/**",
    "**/test_*.py",
]
max_complexity = 15

[dependency-groups]
dev = [
    "excalidraw-mcp>=0.1.2",
    "session-mgmt-mcp>=0.1.3",
]
